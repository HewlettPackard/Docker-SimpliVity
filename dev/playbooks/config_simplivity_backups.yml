###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###
---
- hosts:  localhost vms
  serial: 3
  connection: local
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault

  vars:
    ovc: "{{ omnistack_ovc | random }}"
    sleep_interval: 5

  environment: "{{ env }}"

  tasks:
    # This task should use the uri module but not sure how to use the parameters in it
    - name: Get Simplivity token
      shell: curl -k https://simplivity@{{ ovc }}/api/oauth/token -d grant_type=password -d username='{{ simplivity_username }}' -d password='{{ simplivity_password }}' | python -mjson.tool | grep access_token | awk -F'"' '{ print $4 }'
      register: token
      when: inventory_hostname in groups.local

    # This one doesnt work
    #- name: Get Simplivity token
    #  uri:
    #    url: "https://simplivity@{{ ovc }}/api/oauth/token"
    #    headers:
    #      Content-Type: application/vnd.simplivity.v1+json
    #    method: GET
    #    body: {"grant_type": "password","username": "{{ simplivity_username }}","password": "{{ simplivity_password }}"}
    #    status_code: 200
    #    body_format: json
    #    force_basic_auth: yes
    #    validate_certs: no
    #  when: inventory_hostname in groups.local

    - name: sleep
      command: sleep '{{ sleep_interval }}'

    - name: Retrieve current backup policies
      uri:
        url: "https://{{ ovc }}/api/policies"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ token.stdout }}
        method: GET
        status_code: 200
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      when: inventory_hostname in groups.local
      register: current_policies

    - name: sleep
      command: sleep '{{ sleep_interval }}'

    - name: Extract existing policies names
      set_fact: current_policies_names="{{ current_policies | json_query(q) }}"
      vars:
        q: "json.policies[].name"
      when: inventory_hostname in groups.local

    - name: Extract policies names to be added
      set_fact: backup_policies_names='{{ backup_policies_names|default([])+[item.name] }}'
      with_items: "{{ backup_policies }}"
      when: inventory_hostname in groups.local

    - name: Set list of nonexistent policies to be added
      set_fact: new_policies_names="{{ backup_policies_names | difference(current_policies_names) }}"
      when: inventory_hostname in groups.local

    - name: Create backup policies
      uri:
        url: "https://{{ ovc }}/api/policies"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ token.stdout }}
        method: POST
        body: {"name":"{{ item }}"}
        status_code: 202
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      with_items: "{{ new_policies_names }}"
      loop_control:
        pause: 10
      when: inventory_hostname in groups.local
      register: create_output

    - name: Get policy IDs
      uri:
        url: "https://{{ ovc }}/api/policies"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ token.stdout }}
        method: GET
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      register: policy_ids
      when: inventory_hostname in groups.local

    - name: sleep
      command: sleep '{{ sleep_interval }}'

    - name: Create backup rules
      uri:
        url: "https://{{ ovc }}/api/policies/{{ policy_ids | json_query(q) }}/rules"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ token.stdout }}
        method: POST
        body: {"days":"{{ item.days }}","start_time":"{{ item.start_time }}","frequency":"{{ item.frequency }}","retention":"{{ item.retention }}"}
        status_code: 202
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      with_items: "{{ backup_policies }}"
      loop_control:
        pause: 10
      vars: 
        q: "json.policies[?name=='{{ item.name }}'].id | [0]"
      when: inventory_hostname in groups.local and new_policies_names | length > 0

    - name: sleep
      command: sleep '{{ sleep_interval }}'

    - name: Get VMs information
      uri:
        url: "https://{{ ovc }}/api/virtual_machines"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ token.stdout }}
        method: GET
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      register: vm_ids
      when: inventory_hostname in groups.local

    - name: sleep
      command: sleep '{{ sleep_interval }}'

    - name: Assign backup policies to VMs
      uri:
        url: "https://{{ ovc }}/api/virtual_machines/{{ hostvars[groups['local'][0]]['vm_ids'] | json_query(q_vms) }}/set_policy"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ token.stdout }}
        method: POST
        body: {"policy_id":"{{ hostvars[groups['local'][0]]['policy_ids'] | json_query(q_policies) }}"}
        status_code: 202
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      vars:
        q_policies: "json.policies[?name=='{{ node_policy }}'].id | [0]"
        q_vms: "json.virtual_machines[?name=='{{ inventory_hostname }}' && state=='ALIVE'].id | [0]"
      delegate_to: localhost
      when: inventory_hostname not in groups.local

    - name: sleep
      command: sleep '{{ sleep_interval }}'

    - name: Set dummy VM names in one string
      set_fact: dummy_vms_string="{{ dummy_vm_prefix }}-in-dockvols-{{ datastores | join(','+dummy_vm_prefix+'-in-dockvols-') }}"
      #set_fact: dummy_vms_string="{{ dummy_vm_prefix }}-{{ datastores | join(','+dummy_vm_prefix+'-in-dockvols-') }}"
      when: inventory_hostname in groups.local

    - name: Convert to list 
      set_fact: dummy_vms="{{ dummy_vms_string.split(',') }}"
      when: inventory_hostname in groups.local

    - name: Assign backup policies to Docker volumes
      uri:
        url: "https://{{ ovc }}/api/virtual_machines/{{ hostvars[groups['local'][0]]['vm_ids'] | json_query(q_vms) }}/set_policy"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ token.stdout }}
        method: POST
        body: {"policy_id":"{{ hostvars[groups['local'][0]]['policy_ids'] | json_query(q_policies) }}"}
        status_code: 202
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      vars:
        q_policies: "json.policies[?name=='{{ docker_volumes_policy }}'].id | [0]"
        q_vms: "json.virtual_machines[?name=='{{ item }}' && state=='ALIVE'].id | [0]"
      delegate_to: localhost
      when: inventory_hostname in groups.local
      with_items: "{{ dummy_vms }}"
      loop_control:
        pause: 10

    - name: sleep
      command: sleep '{{ sleep_interval }}'
