###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
### 
---

    - name: Retrieve a token for the UCP API
      uri:
        url: "https://{{ ARG_UCP_IP }}/auth/login"
        headers:
          Content-Type: application/json
        method: POST
        status_code: 200
        body_format: json
        validate_certs: no
        body: '{"username":"{{ ARG_UCP_USER }}","password":"{{ ARG_UCP_PASSWORD }}"}'
      delegate_to: localhost
      register: resp
      until: resp.status == 200
      retries: 20
      delay: 5

    - name: Remember the API's token
      set_fact:
        auth_token:  "{{resp.json.auth_token}}"

    - name: Is the node already in the swarm
      uri:
        url: 'https://{{ ARG_UCP_IP }}/nodes?filters={"name":{"{{ inventory_hostname }}.{{ domain_name }}":true}}'
        headers:
          Content-Type: application/json
          Authorization: Bearer {{ auth_token }}
        method: GET
        status_code: 200
        body_format: json
        validate_certs: no
      delegate_to: localhost
      register: resp

    - set_fact:
        swarm_member: "{% if resp.json[0] is defined %}true{% else %}false{% endif %}"  

    - debug:
        var: swarm_member
      when: _debug is defined

    - name: Retrieve a worker token
      uri:
        url: "https://{{ ARG_UCP_IP }}/swarm"
        headers:
          Content-Type: application/json
          Authorization: Bearer {{ auth_token }}
        method: GET
        status_code: 200
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      delegate_to: localhost
      register: resp
      when: swarm_member == false

    - name: Memorize the swarm's token
      set_fact:
        token:  "{{ resp.json.JoinTokens.Worker }}"
      when: swarm_member == false

    - name: Add node to the swarm
      command: "docker swarm join --token {{ token }} {{ ARG_ADVERTIZE_IP }}"
      when: swarm_member == false

#    - name: Join the swarm
#      uri:
#        url: 'https://{{ ARG_UCP_IP }}/swarm/join'
#        headers:
#          Content-Type: application/json
#          Authorization: Bearer {{ auth_token }}
#        method: POST
#        status_code: 200
#        body_format: json
#        body: '{"AdvertiseAddr": "{{ advaddr }}:2377","RemoteAddrs": ["{{ ARG_ADVERTIZE_IP }}],"ListenAddr": "0.0.0.0:2377","JoinToken": "{{ token }}"}'
#        validate_certs: no
#      vars:
#         advaddr:  "{{ ip_addr | ipaddr('address') }}"
#      register: resp
#      when: swarm_member == false

    - name: Poll the status of the node
      uri:
        url: 'https://{{ ARG_UCP_IP }}/nodes/{{ inventory_hostname }}.{{ domain_name }}'
        headers:
          Content-Type: application/json
          Authorization: Bearer {{ auth_token }}
        method: GET
        status_code: 200,404
        body_format: json
        validate_certs: no
      delegate_to: localhost
      register: resp
      until: resp.status == 200 and resp.json.Spec.Role == "worker" and resp.json.Status.State == "ready"
      delay: 10
      retries:  "{{ ( 1 + worker_join_delay  / 10 ) | int }}"

    - debug: msg="Availability={{resp.json.Spec.Availability}} Role={{resp.json.Spec.Role}} State={{resp.json.Status.State}}"
      when: _debug is defined

#
# set orchestrator type
#
    - name: Clear Orchestrator type "swarm" 
      command: "docker node update --label-rm com.docker.ucp.orchestrator.swarm {{ inventory_hostname }}.{{ domain_name }}" 
      when: orchestrator is defined and orchestrator == "kubernetes"
      failed_when: false
      delegate_to: "{{ ucp_instance }}"

    - name: Set Ochestrator type Kubernetes
      command: "docker node update --label-add com.docker.ucp.orchestrator.kubernetes=true {{ inventory_hostname }}.{{ domain_name }}"
      when: orchestrator is defined and orchestrator == "kubernetes"
      delegate_to: "{{ ucp_instance }}"

    - name: Clear Orchestrator type "Kubernetes"
      command: docker node update --label-rm com.docker.ucp.orchestrator.kubernetes {{ inventory_hostname }}.{{ domain_name }}
      when: orchestrator is defined and orchestrator == "swarm"
      failed_when: false
      delegate_to: "{{ ucp_instance }}"

    - name: Set Orchestrator type "swarm" 
      command: "docker node update --label-add com.docker.ucp.orchestrator.swarm=true {{ inventory_hostname }}.{{ domain_name }}" 
      when: orchestrator is defined and orchestrator == "swarm"
      delegate_to: "{{ ucp_instance }}"

