###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###
---
- hosts: ucp_main 
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault
    - ../group_vars/backups

  environment:
    - "{{ env }}"
    - UCP_USERNAME: "{{ ucp_username }}"
    - UCP_PASSWORD: "{{ ucp_password }}"
    - UCP_CA: "{{ ucp_ca_cert | default('') }}"

  tasks:
#
# Find a UCP endpoint and the actual version of UCP
#
    - include_tasks: includes/find_ucp.yml ping_servers="{{ groups.ucp }}"
    - debug: var=ucp_instance
      when: _debug is defined
    - include_tasks: includes/get_ucp_version.yml
    - debug: var=detected_ucp_version
      when: _debug is defined
   
    - debug: msg="ucp_version {{ ucp_version }}, detected version {{ detected_ucp_version }}"
      when: _debug is defined

#
# configure passwordless ssh from ucp_main to our ansible box
#
    - name: Register key
      stat: path=/root/.ssh/id_rsa
      register: key
    - name: Create keypairs
      shell: ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''
      when: key.stat.exists == False
    - name: Fetch all public ssh keys
      shell: cat ~/.ssh/id_rsa.pub
      register: ssh_keys
    - name: Deploy keys on localhost
      authorized_key: user=root key="{{ item }}"
      delegate_to: localhost
      with_items:
        - "{{ ssh_keys.stdout }}"

#
# Get a timestamp, will be used to name the backup
#
    - name: Get TimeStamp
      command: date -u '+%Y_%m_%d_%H%M%S'
      register: timestamp
    - name: Store the timestamp
      set_fact:
        timestamp: "{{ timestamp.stdout }}"
#
# Copy the backup script to the target node
#
    - name: Creates directory on the VM 
      file:
        path: /root/scripts
        state: directory
    - name: Copy backup scripts to backup VM
      template: src=../templates/backup_ucp.sh.j2 dest=/root/scripts/backup_ucp.sh
    - file:
        path: /root/scripts/backup_ucp.sh
        mode: 0744

#
# Get the UCP ID
#
    - name: Copy utils to backup VM
      template: src=../templates/ucp_get_id.sh.j2 dest=/root/scripts/ucp_get_id.sh
    - file:
        path: /root/scripts/ucp_get_id.sh
        mode: 0744
    - name: Get the UCP ID
      shell: /root/scripts/ucp_get_id.sh {{ ucp_version }}
      register: ucp_id
    - set_fact:
        ucp_id: "{{ ucp_id.stdout }}" 

    - set_fact:
        backup_name:  "backup_ucp_{{ ucp_id }}_{{ inventory_hostname }}_{{ timestamp }}"
      when: backup_name is undefined

#
# Backup now
#
    - name: Backup UCP now
      shell: /root/scripts/backup_ucp.sh {{ ucp_id }} {{ backup_name }}
      register: res

    - debug: var=res
      when: _debug is defined

    - name: Create a temporary directory to receive files that contains metadata
      tempfile:
        state: directory
        suffix: temp
      register: res
      delegate_to: localhost

    - template:
        src: ../templates/backup_meta.yml.j2
        dest: "{{ res.path }}/meta.yml"
      delegate_to: localhost

    - copy:
         src: "{{ item }}"
         dest: "{{ res.path }}/"
      with_items:
        - ../vm_hosts
        - ../group_vars/vars
        - ../group_vars/backups
      delegate_to: localhost

    - name: Backup the Metadata as well
      archive:
        path:
          - "{{ res.path }}/"
        dest: "{{ backup_dest }}/{{ backup_name }}.vars.tgz"
      delegate_to: localhost

