###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###
---
- hosts: local
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault
    - ../group_vars/backups

  vars:
    http_proxy_switch:  "{% if  env.http_proxy is defined %} --http-proxy {{ env.http_proxy }} {% endif %}"
    https_proxy_switch:  "{% if  env.https_proxy is defined %} --https-proxy {{ env.https_proxy }} {% endif %}"
    no_proxy_switch:  "{% if  env.no_proxy is defined %} --no-proxy '{{ env.no_proxy }}' {% endif %}"

  environment:
    - UCP_USERNAME: "{{ ucp_username }}"
    - UCP_PASSWORD: "{{ ucp_password }}"
    - UCP_CA: "{{ ucp_ca_cert | default('') }}"
    - DTR_CA: "{{ dtr_ca_cert | default('') }}"
    - DTR_CERT: "{{ dtr_server_cert | default('') }}"
    - DTR_KEY: "{{ dtr_server_key | default('') }}"

  pre_tasks:
    - include_tasks: includes/find_ucp.yml ping_servers="{{ groups.ucp }}"
    - debug: var=ucp_instance
      when: _debug is defined

  roles:
    - role: get-dtr-replica
      ARG_UCP_IP:        "{{ ucp_instance }}.{{domain_name}}"
      ARG_UCP_USER:      "{{ ucp_username }}"
      ARG_UCP_PASSWORD:  "{{ ucp_password }}"

  tasks:


#
# note: existing_dtr_replica_id is returned by the role get-dtr-replica
#

#
# Load Certificates
#
    - include_tasks: includes/load_certificates.yml

#
# We reconfigure the UCP endpoint, for some reason, using the LB fqdn does not work when we install/join DTR
#

    - name: Reconfigure DTR
      command: docker run 
        --env UCP_USERNAME 
        --env UCP_PASSWORD 
        {{ switch_env_ucp_ca }} {{  switch_env_dtr_certificates }}
        docker/dtr:{{ dtr_version }} reconfigure
          --ucp-url https://{{ groups.ucp_lb[0] }}.{{ domain_name }} 
          {{ switch_ucp_insecure }} --existing-replica-id {{ existing_dtr_replica_id }}
      vars:
        switch_ucp_insecure:         "{% if ucp_ca_cert is defined %}{% else %}--ucp-insecure-tls{% endif %}"
        switch_env_ucp_ca:           "{% if ucp_ca_cert is defined %}--env UCP_CA{% endif %}"
        switch_env_dtr_certificates: "{% if dtr_ca_cert is defined %}--env DTR_CA --env DTR_CERT --env DTR_KEY{% endif %}"
      register: task_result
      until: task_result.rc == 0
      retries: 3
      delay: 60
      when: existing_dtr_replica_id != 0
      delegate_to: "{{ ucp_instance }}" 

    - debug: var=task_result
      when: _debug is defined
#
# find a working DTR instance
#
    - name: Find a DTR instance
      include_tasks: includes/find_dtr.yml ping_servers="{{ groups.dtr }}"
    - debug: var=dtr_instance
#
# Enable Image Scanning
#
    - name: Enable image scanning
      uri:
        url: "https://{{ dtr_instance }}.{{ domain_name }}/api/v0/meta/settings"
        method: POST
        user: "{{ ucp_username }}"
        password: "{{ ucp_password }}"
        body: {"scanningEnabled":true}
        status_code: 202
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      when: dtr_instance != ".none."

