###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###
---
- name: Restore DTR Metadata
  hosts: dtr_main
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault
    - includes/internal_vars.yml
    - ../group_vars/backups

  vars:
    http_proxy_switch:  "{% if  env.http_proxy is defined %} --http-proxy {{ env.http_proxy }} {% endif %}"
    https_proxy_switch:  "{% if  env.https_proxy is defined %} --https-proxy {{ env.https_proxy }} {% endif %}"
    no_proxy_switch:  "{% if  env.no_proxy is defined %} --no-proxy '{{ env.no_proxy }}' {% endif %}"

  pre_tasks:
    - include_tasks: includes/find_ucp.yml
      vars:
        ping_servers: "{{ groups.ucp }}"
    - debug: var=ucp_instance
      when: _debug is defined
    - fail:
      when: ucp_instance == ".none."

  roles:
    - role: get-dtr-replica
      ARG_UCP_IP:        "{{ ucp_instance }}.{{domain_name}}"
      ARG_UCP_USER:      "{{ ucp_username }}"
      ARG_UCP_PASSWORD:  "{{ ucp_password }}"

    - role: worker
      ARG_UCP_IP:         "{{ ucp_instance }}.{{ domain_name }}"
      ARG_UCP_USER:       "{{ ucp_username }}"
      ARG_UCP_PASSWORD:   "{{ ucp_password }}"
      ARG_ADVERTIZE_IP:   "{{ ucp_instance }}.{{ domain_name }}:2377"
      worker_role_ports:  "{{ internal_dtr_ports }}"
      worker_join_delay:  180


  tasks:
#
# exit if there is an existing DTR replica
#
    - debug: var=existing_dtr_replica_id
      when: _debug is defined

#
# configure passwordless ssh to our ansible box
#
    - name: Register key
      stat: path=/root/.ssh/id_rsa
      register: key
    - name: Create keypairs
      shell: ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''
      when: key.stat.exists == False
    - name: Fetch all public ssh keys
      shell: cat ~/.ssh/id_rsa.pub
      register: ssh_keys
    - name: Deploy keys on localhost
      authorized_key: user=root key="{{ item }}"
      delegate_to: localhost
      with_items:
        - "{{ ssh_keys.stdout }}"

    - name: Create script directory
      file:
        path: /root/scripts
        state: directory
    - name: Copy UCP root CA Certificate if one is specified
      copy:
        src: "{{ ucp_certs_dir }}/ca.pem"
        dest: /root/scripts/ca.pem
      when: ucp_certs_dir is defined
    - name: Copy restore script to target
      template: src=../templates/restore_dtr_metadata.sh.j2 dest=/root/scripts/restore_dtr_metadata.sh
    - file:
        path: /root/scripts/restore_dtr_metadata.sh
        mode: 0744

    - name: restore DTR
      shell: /root/scripts/restore_dtr_metadata.sh {{ backup_dtr_id }}
      environment:
        UCP_USERNAME: "{{ucp_username}}"
        UCP_PASSWORD: "{{ucp_password}}"
      register: res
      when: existing_dtr_replica_id == "0"


    - debug:
        msg: "Existing DTR replica detected with id {{ existing_dtr_replica_id }} . Did not restore DTR"
      when: existing_dtr_replica_id != "0"
