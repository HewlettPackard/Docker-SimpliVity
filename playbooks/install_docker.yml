###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
### 
---
- name: Install Docker (Redhat)
  hosts: docker
  gather_facts: false
  become_user: root
  become: true

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault

  environment: "{{ env }}"

  tasks:

    # see http://success.docker.com/article/node-using-swap-memory-instead-of-host-memory
    - name: Set vm.swapiness
      sysctl:
        name: vm.swappiness
        value: 0
        state: present

    # http://success.docker.com/article/node-using-swap-memory-instead-of-host-memory
    - name: set sysctl.vm.overcommit_memory
      sysctl:
        name: vm.overcommit_memory
        value: 1
        state: present

    # http://success.docker.com/article/fix-ucp-calico-for-rp-filter
    - name: set net.ipv4.conf.all.rp_filter
      sysctl:
        name: net.ipv4.conf.all.rp_filter
        value: 1
        state: present

    - name: Install dependencies
      yum:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
        - policycoreutils-python 
        - libseccomp 
        - libtool-ltdl 
        - yum-utils
        - NetworkManager-glib 
        - nm-connection-editor
        - libsemanage-python 
        - policycoreutils-python

    - name: Enable extras RHEL repository
      shell: yum-config-manager --enable rhel-7-server-extras-rpms

    - name: Set Docker url
      lineinfile:
        path: /etc/yum/vars/dockerurl
        create: yes
        backup: yes
        state: present
        line: "{{ docker_ee_url }}/rhel" 

    - name: Set OS version
      lineinfile:
        path: /etc/yum/vars/dockerosversion
        create: yes
        backup: yes
        state: present
        line: "{{ rhel_version }}"

    - name: Add Docker Repository
      yum_repository:
        name: docker-ee-{{ docker_ee_reponame }}
        description: Docker EE {{ docker_ee_reponame }} - $basearch
        file: docker-ee
        baseurl: $dockerurl/$dockerosversion/$basearch/{{ docker_ee_reponame }}/
        enabled: yes
        gpgcheck: yes
        gpgkey: $dockerurl/gpg

    - name: Install Docker
      yum:
        name: '{{ docker_ee_version | default("docker-ee") }}'
#        enablerepo: docker-ee-test-18.01
        state: 'latest' 
        update_cache: yes

    - name: Ensure Docker is started
      systemd:
        name: docker
        enabled: yes
        state: started

######################################################################################
#
# Play2: Install Docker on Windows
#
######################################################################################
- name: Install Docker (Windows)
  hosts: win_worker
  gather_facts: false
  connection: local
  user: remote
  become: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault

  environment: "{{ env }}"

  vars:
    proxy_switch: "{% if  env.http_proxy is defined  %}-Proxy http://{{ env.http_proxy  }}{% endif %}"

  tasks:

  - name: Is Docker running
    win_shell: |
      $svc=(get-service -name docker)
      if ( $svc -ne $null )
      {
        $svc.status
      }
    register: status

  - block: # Docker is not running
    #
    # Apply Windows updates if wanted
    #
    - name: Configure Proxy for use by Windows Updates
      win_shell: |
        netsh winhttp set proxy http://{{ env.http_proxy }}
      when: env.http_proxy is defined

    - name: See if Windows Updates are wanted or not
      set_fact:
        windows_update: "{{ windows_update | default(true) }}"

    - block:

      - name: Download and install Windows updates
        win_updates:
        register: update_result

      - name: Reboot VM after Updates if required
        win_reboot:
          post_reboot_delay: 30
        when: update_result.reboot_required

      when: windows_update is defined and windows_update

    - name: Configure proxy IE
      win_shell: |
        $regKey="HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings"
        Set-ItemProperty -path $regKey ProxyEnable -value 1
        Set-ItemProperty -path $regKey ProxyServer -value {{ env.http_proxy }}
      when: env.http_proxy is defined

    - name: Evaluate Path of Powershell Profile
      win_shell: |
        split-path $profile
      register: res

    - name: Create Profile Directory
      win_file:
        path: "{{ res.stdout_lines[0] }}"
        state: directory

    - name: Populate the Powershell profile file
      win_template:
        src: ../templates/windows/ps_profile.ps1.j2
        dest: 'C:\Users\Administrator\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1'
      when: env.http_proxy is defined

    - name: Configure Proxy for Docker Daemon
      win_shell: |
        [Environment]::SetEnvironmentVariable("HTTP_PROXY", "http://{{ env.http_proxy }}/", [EnvironmentVariableTarget]::Machine)
      when: env.http_proxy is defined

    #
    # wanted to get rid of the proxy switch thanks the regsitry edit above but it does not work
    #
    - name: Install Nuget Provider
      win_shell: |
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force {{ proxy_switch }}
      register: res
    - debug: var=res
      when: _debug is defined

    # 
    # could not make win_psmodule work consistently behinda proxy
    #
    - name: Install DockerMsftProvider Powershell Module
      win_shell: |
        Install-Module DockerMsftProvider -Force {{ proxy_switch }} 
      register: res
    - debug: var=res
      when: _debug is defined

    - name: Install Docker Package
      win_shell: Install-Package Docker -ProviderName DockerMsftProvider -Force {{ proxy_switch }}  {{ VersionSwitch }}
      vars:
        VersionSwitch: "{% if docker_ee_version_windows is defined %}-RequiredVersion {{ docker_ee_version_windows }}{% endif %}"
      register: res

    - name: Check if Windows reboot is required
      win_shell: |
        (Install-WindowsFeature Containers).RestartNeeded
      register: res
    - debug: var=res
      when: _debug is defined

    - name: Reboot VM after Docker package installation
      win_reboot:
      when: res.stdout_lines[0] == "Yes"

    - name: Start Docker Service
      win_service:
        name: Docker
        start_mode: auto
        state: restarted

    - wait_for_connection:
        delay: 120
        timeout: 300
      register: res

    - debug: var=res
      when: _debug is defined

    - name: Install required docker swarm ucp-agent-win image 
      win_shell: |
        docker image pull docker/ucp-agent-win:{{ ucp_version }}

    - name: Install required docker swarm ucp-dsinfo-win image
      win_shell: |
        docker image pull docker/ucp-dsinfo-win:{{ ucp_version }}

    - name: Run Windows node setup script
      win_shell: |
        docker run --rm docker/ucp-agent-win:{{ ucp_version }} windows-script | 
        powershell -noprofile -noninteractive -command 'Invoke-Expression -Command $input'
      register: res
    - debug: var=res
      when: _debug is defined

    - name: Test Docker Installation
      win_shell: docker container run hello-world:nanoserver
      register: docker_cmd

    - name: Fail Playbook if Docker Test Fails
      fail:
      when: docker_cmd.rc != 0

    # idempotency not implemented, we don't touch the target if the service was installed
    when: status.stdout == "" # Docker was installedO

  - block: # Docker was running
    - debug: msg="Docker Service is installed, not making any change to the system"
    when: status.stdout_lines != ""

