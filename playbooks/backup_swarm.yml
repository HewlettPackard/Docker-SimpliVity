###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###
---
- hosts: ucp_main
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/backups
    - ../group_vars/vault

  environment: "{{ env }}"

  tasks:
#
# configure password less ssh from ucp_main to our ansible box
#
    - name: Register key
      stat: path=/root/.ssh/id_rsa
      register: key
    - name: Create keypairs
      shell: ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''
      when: key.stat.exists == False
    - name: Fetch all public ssh keys
      shell: cat ~/.ssh/id_rsa.pub
      register: ssh_keys
    - name: Deploy keys on Ansible Box
      authorized_key: user=root key="{{ item }}"
      delegate_to: localhost
      with_items:
        - "{{ ssh_keys.stdout }}"

#
# Get a timestamp, will be used to name the backup
#
    - name: Get TimeStamp
      command: date -u '+%Y_%m_%d_%H%M%S'
      register: timestamp
    - name: Store the timestamp
      set_fact:
        timestamp: "{{ timestamp.stdout }}"
    - name: Creates directory on the VM 
      file:
        path: /root/scripts
        state: directory

    - set_fact:
        swarm_backup_offline: "{{ swarm_backup_offline | default('false') }}"
    - name: Copy backup scripts to backup VM
      template: src=../templates/backup_swarm.sh.j2 dest=/root/scripts/backup_swarm.sh
    - file:
        path: /root/scripts/backup_swarm.sh
        mode: 0744

    - set_fact:
        backup_name:  "backup_swarm_{{ inventory_hostname }}_{{ timestamp }}"
      when: backup_name is undefined

#
# Compute the quorum
#
    - name: How many nodes are active now
      shell: >
            (
             docker node ls -f "role=manager" --format "{{ '{{' }}.Status{{ '}}' }}" | grep Ready | wc -l )
      register: active_nodes
    - shell: echo $(( ({{ total }}+1)/2))
      vars:
        total: "{{ groups['ucp'] | length }}"
      register: quorum
    - debug:
        msg: "total={{ total }} quorum = {{ quorum.stdout }} active = {{ active_nodes.stdout }}"
      vars:
        total: "{{ groups['ucp'] | length }}"

    - fail:
        msg: "Aborting: Reason number of active nodes {{ active_nodes.stdout }} <= quorum = {{ quorum.stdout }} and swarm_backup_online != true"
      when: active_nodes.stdout <= quorum.stdout and swarm_backup_offline  == "true" 
     
    - name: "Backup swarm data now Offline mode {{ swarm_backup_offline }}"
      shell: /root/scripts/backup_swarm.sh {{ "unused" }} {{ backup_name }}
      register: res

    - debug: var=res
      when: _debug is defined

    - name: Create a temporary directory to receive files that contains metadata
      tempfile:
        state: directory
        suffix: temp
      register: res
      delegate_to: localhost

    - template:
        src: ../templates/backup_meta.yml.j2
        dest: "{{ res.path }}/meta.yml"
      delegate_to: localhost

    - copy:
         src: "{{ item }}"
         dest: "{{ res.path }}/"
      with_items:
        - ../vm_hosts
        - ../group_vars/vars
        - ../group_vars/backups
      delegate_to: localhost

    - name: Backup the Metadata as well
      archive:
        path:
          - "{{ res.path }}/"
        dest: "{{ backup_dest }}/{{ backup_name }}.vars.tgz"
      delegate_to: localhost

