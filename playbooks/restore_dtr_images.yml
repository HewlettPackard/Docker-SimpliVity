###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
### 
---
- hosts: nfs
  gather_facts: false
  become_user: root
  become: true

  vars_files:
    - ../group_vars/vars
    - ../group_vars/backups

  environment: "{{ env }}"

  tasks:
#
# configure passwordless ssh to our ansible box
#
    - name: Register key
      stat: path=/root/.ssh/id_rsa
      register: key
    - name: Create keypairs
      shell: ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''
      when: key.stat.exists == False
    - name: Fetch all public ssh keys
      shell: cat ~/.ssh/id_rsa.pub
      register: ssh_keys
    - name: Deploy keys on localhost
      authorized_key: user=root key="{{ item }}"
      delegate_to: localhost
      with_items:
        - "{{ ssh_keys.stdout }}"

#
# Create the restore script on the target machine
#
    - name: Creates directory
      file:
        path: /root/scripts
        state: directory

    - name: Copy restore script to target
      template: src=../templates/restore_dtr_images.sh.j2 dest=/root/scripts/restore_dtr_images.sh

    - file:
        path: /root/scripts/restore_dtr_images.sh
        mode: 0744

    - name: Do not restore if the directoyr containing the image data is not empty
      stat:
        path: "{{ images_folder }}/docker"
      register: res

    - fail:
        msg: "Could not 'stat' {{ images_folder }}/docker, Aborting"
      when: res.failed != false

    - debug:
        msg: "Folder {{ images_folder }}/docker is not empty, will not restore data"
      when: res.stat.exists != false

    - name: restore Data
      shell: /root/scripts/restore_dtr_images.sh
      register: res
      when: res.stat.exists == false

#
# Could not find a way to specify a remote source
#
#    - name: Restore DTR Image data
#      unarchive:
#        src: "{{ backup_dtr_data }}"
#        dest: "{{ images_folder }}"

