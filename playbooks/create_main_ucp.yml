###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
### 
---
- name: Create First UCP Instance
  hosts: ucp_main
  gather_facts: false
  become_user: root
  become: true

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault
    - includes/internal_vars.yml

  vars:
    san_fqdns: "{% for host in groups['ucp'] %}--san {{ host }}.{{ domain_name }} {% endfor %} {% if ucp_lb_fqdn | length > 0 %}--san {{ ucp_lb_fqdn }} {% endif %}"
    san_ips: "{% for host in groups['ucp'] %} --san {{ hostvars[host].ip_addr | ipaddr('address') }} {% endfor %} {% if ucp_lb_ipv4 | length > 0 %} --san {{ ucp_lb_ipv4 }} {% endif %}"
    san_all_formatted: "{{ san_fqdns }} {{ san_ips }}"

  environment:
    - "{{ env }}"
    - UCP_ADMIN_USER: "{{ ucp_username }}"
    - UCP_ADMIN_PASSWORD: "{{ ucp_password }}"
    - UCP_LICENSE:  "{{ lookup('file','{{ license_file }}') }}"

  roles:
    - role: hpe.openports
      hpe_openports_ports: "{{ internal_ucp_ports }}"

  tasks:

#
# Is UCP installed in the cluster
#
    - name: See if there is an UCP instance running
      include_tasks: includes/find_ucp.yml
      vars:
        ping_servers: "{{ groups.ucp }}"
    - debug: var=ucp_instance
      when: _debug is defined

    - name: Copy the license
      copy: src="{{ license_file }}" dest="/tmp/license.lic"
      when: ucp_instance == ".none."

#
# Load the certificates
#
    - include_tasks: includes/load_certificates.yml

#
# Copy user supplied certificates (if any)
#
    - name: "Create volume  {{ ucp_certificates_volume_name }} if ucp_certs_dir is defined and UCP is not installed" 
      command: docker volume create {{ ucp_certificates_volume_name }}
      when: ucp_instance == ".none." and ucp_certs_dir is defined

    - name: "Copy user supplied certificates for UCP" 
      copy:
        src: "{{ ucp_certs_dir }}/"
        dest: "/root/ucp_certs/"
      when: ucp_instance == ".none." and ucp_certs_dir is defined

    - name: "Copying certificates to volume  {{ ucp_certificates_volume_name }}"
      command:  docker run --rm  -v/root/ucp_certs:/src -v{{ ucp_certificates_volume_name }}:/data alpine sh -c 'cp /src/* /data && ls /data'
      when: ucp_instance == ".none." and ucp_certs_dir is defined
      register: copy_certs

    - debug: var=copy_certs
      when: ucp_instance == ".none." and ucp_certs_dir is defined and _debug is defined

#
# Install UCP if needed
#

    - name: Install swarm leader and first UCP node
      command: |
         docker run --rm --env UCP_ADMIN_USER --env UCP_ADMIN_PASSWORD
           --name ucp
           -v /var/run/docker.sock:/var/run/docker.sock 
           -v /tmp/license.lic:/config/docker_subscription.lic
           docker/ucp:{{ ucp_version }} install 
             --host-address {{ ip_addr | ipaddr('address') }}  
             --pod-cidr {{ k8s_pod_cidr | default ('192.168.0.0/16') }}
          {{ san_all_formatted }}
          {{ external_server_cert_switch }}
      vars:
        - external_server_cert_switch: "{% if ucp_certs_dir is defined %}--external-server-cert{% else %}{% endif %}"
      register: output
      when: ucp_instance == ".none."

    - debug:
        var: output
      when: _debug is defined and ucp_instance == ".none."

    - debug: 
        msg: "An UCP instance was found at {{ ucp_instance }}.{{ domain_name }}"
      when: ucp_instance != ".none." 
