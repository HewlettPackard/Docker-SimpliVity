###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
### 
---

###################################################################################
#
# play1: Perform some rudimentary sanity check first
#
###################################################################################
- hosts:  all_vms
  name: Config Backup - Perform Rudimentary Sanity Check (VMs)
  connection: local
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault

  vars:
    ovc: "{{ omnistack_ovc | random }}"
    sleep_interval: 2

  environment: "{{ env }}"

  tasks:

  #
  #   - we accept nodes without a backup policy, which means, we don;t backup the VM
  #   - but we don't accept nodes specifying a backup policy which is not defined in "backup_policies"
  #

  - fail: msg="backup_policies is not definedi, aborting..."
    when: backup_policies is not defined

  - set_fact: node_policy_match="{{ backup_policies | json_query ( q ) }}"
    vars:
       q: "[?name=='{{ node_policy }}'].name"
    when: node_policy is defined

  - fail: msg="Backup policy {{ node_policy }} not found in {{ backup_policies }}"
    when: node_policy is defined and node_policy_match | length <= 0

  - debug: msg="No backup policy specified for {{ inventory_hostname }} "
    when: node_policy is not defined

###################################################################################
#
# Play2: Perform sanity check on localhost (docker_volume backups)
#
###################################################################################
- hosts: localhost
  name: Config Backup - Perform Rudimentary Sanity Check (Docker Volumes)
  connection: local
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault

  vars:
    ovc: "{{ omnistack_ovc | random }}"
    sleep_interval: 2

  environment: "{{ env }}"

  tasks:

  - fail: msg="backup_policies is not definedi, aborting..."
    when: backup_policies is not defined

  - fail: msg="docker_volumes_policy is not defined, aborting..."
    when: docker_volumes_policy is not defined

  - set_fact: node_policy_match="{{ backup_policies | json_query ( q ) }}"
    vars:
       q: "[?name=='{{ docker_volumes_policy }}'].name"

  - fail: msg="Backup policy for Docker volumes {{ docker_volumes_policy  }} not found in {{ backup_policies }}"
    when: node_policy_match | length <= 0

###################################################################################
#
# Play3: Create all Backup Policies,  populate them with the specified rules
#
###################################################################################

- hosts: localhost
  name: Config Backup - Create Backup policies
  connection: local
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault

  vars:
    ovc: "{{ omnistack_ovc | random }}"
    sleep_interval: 2

  environment: "{{ env }}"

  tasks:

  - name: Retrieve an auth token 
    include_tasks: includes/svt_get_auth_token.yml

  #
  # Create backup policies 
  #

  - name: Create backup policy
    uri:
      url: "https://{{ ovc }}/api/policies"
      headers:
        Content-Type: application/vnd.simplivity.v1+json
        Authorization: Bearer {{ svtapitoken.json.access_token }}
      method: POST
      body: {"name":"{{ item.name }}"}
      status_code: 202,400
      body_format: json
      force_basic_auth: yes
      validate_certs: no
    register: res
    with_items:
      - "{{ backup_policies }}"

  - include_tasks: includes/svt_wait_for_tasks.yml
    vars:
      tasks: "{{ res.results }}"

  - name: Get policy IDs
    uri:
      url: "https://{{ ovc }}/api/policies?fields=id,name"
      headers:
        Content-Type: application/vnd.simplivity.v1+json
        Authorization: Bearer {{ svtapitoken.json.access_token }}
      method: GET
      body_format: json
      force_basic_auth: yes
      validate_certs: no
    register: policy_ids

  - name: sleep
    command: sleep '{{ sleep_interval }}'

  - name: Configure backup rules
    uri:
      url: "https://{{ ovc }}/api/policies/{{ policy_ids | json_query(q) }}/rules?replace_all_rules=true"
      headers:
        Content-Type: application/vnd.simplivity.v1.4+json
        Accept: application/json
        Authorization: Bearer {{ svtapitoken.json.access_token }}
      method: POST
      body: '[{"days":"{{ item.days }}","start_time":"{{ item.start_time }}","frequency":"{{ item.frequency }}","retention":"{{ item.retention }}"}]'
      status_code: 202
      body_format: json
      force_basic_auth: yes
      validate_certs: no
    with_items: "{{ backup_policies }}"
    loop_control:
      pause: 2
    vars:
      q: "json.policies[?name=='{{ item.name }}'].id | [0]"

###################################################################################
#
# Play4: Assign backup policy to VM (this is done on the VM)
#
###################################################################################
- hosts:  all_vms
  name: Config Backup - Assign Backup policies
  connection: local
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault

  vars:
    ovc: "{{ omnistack_ovc | random }}"
    sleep_interval: 2

  environment: "{{ env }}"

  tasks:

  - block: # when node_policy is defined

    - name: Retrieve an auth token
      include_tasks: includes/svt_get_auth_token.yml

  #
  # Get the backup policy ID, abort if not found
  #
    - name: Get Backup Policy ID
      uri:
        url: "https://{{ ovc }}/api/policies?fields=id,name"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ svtapitoken.json.access_token }}
        method: GET
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      delegate_to: localhost
      register: policy_ids
    - set_fact: policy_id="{{ policy_ids | json_query(q) }}"
      vars:
        q: "json.policies[?name=='{{ node_policy }}'].id "
    - fail: msg="Backup Policy ID for {{ node_policy  }} cannot be determined. Aborting"
      when: policy_id | count <= 0

  #
  # Get the VM ID, abort if not found
  #
    - name: Get VM ID
      uri:
        url: "https://{{ ovc }}/api/virtual_machines"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ svtapitoken.json.access_token }}
        method: GET
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      delegate_to: localhost
      register: vm_ids
    - set_fact: vm_id="{{ vm_ids | json_query(q) }}"
      vars:
        q: "json.virtual_machines[?name=='{{ inventory_hostname }}' && state=='ALIVE'].id "
    - fail: msg="VM ID for {{ inventory_hostname }} cannot be determined. Aborting"
      when: vm_id | count <= 0

    - name: Assign backup policy to VM
      uri:
        url: "https://{{ ovc }}/api/virtual_machines/{{ vm_id[0] }}/set_policy"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ svtapitoken.json.access_token }}
        method: POST
        body: {"policy_id":"{{ policy_id[0] }}"}
        status_code: 202
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      delegate_to: localhost
      register: res

    - include_tasks: includes/svt_wait_for_tasks.yml
      vars:
        tasks: "{{ [ res ] }}"

    when: node_policy is defined

###################################################################################
#
# Assign backup policy to Dummy VMs
#
###################################################################################
- hosts: localhost
  name: Config Backup - Assign Backup Policies (Dummy VMs)
  connection: local
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault

  vars:
    ovc: "{{ omnistack_ovc | random }}"
    sleep_interval: 2

  environment: "{{ env }}"

  tasks:

    - include_tasks: includes/svt_get_auth_token.yml

    - name: Build the list of Dummy VM names
      set_fact: dummy_vms="{{ dummy_vms | default([]) + [ prefix+'-in-dockvols-'+item  ] }}"
      vars: 
        prefix: "{{ dummy_vm_prefix }}"
      with_items:
        - "{{ datastores }}"

    #
    # Get the backup policy ID, abort if not found
    #
    - name: Get Backup Policy ID
      uri:
        url: "https://{{ ovc }}/api/policies?fields=id,name"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ svtapitoken.json.access_token }}
        method: GET
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      register: policy_ids
    - set_fact: policy_id="{{ policy_ids | json_query(q) }}"
      vars:
        q: "json.policies[?name=='{{ docker_volumes_policy }}'].id "
    - fail: msg="Backup Policy ID for {{ docker_volumes_policy   }} cannot be determined. Aborting"
      when: policy_id | count <= 0

    #
    # Get All VM IDs
    #
    - name: Get Dummy VMs IDs
      uri:
        url: "https://{{ ovc }}/api/virtual_machines"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ svtapitoken.json.access_token }}
        method: GET
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      register: vm_ids

    - set_fact:
        dummy_vms_ids: "{{ dummy_vms_ids | default([]) +  vm_ids | json_query (q)  }}"
      vars:
        - q: "json.virtual_machines[?name=='{{ item }}' && state=='ALIVE'].{id: id, name: name, state: state}"
      with_items:
        - "{{ dummy_vms }}"

    #
    # Assign Backup policy to each dummy VM that we have found
    #
    - name: Assign backup policies to Docker volumes
      uri:
        url: "https://{{ ovc }}/api/virtual_machines/{{ item.id }}/set_policy"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ svtapitoken.json.access_token }}
        method: POST
        body: {"policy_id":"{{ policy_id[0] }}"}
        status_code: 202
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      with_items: "{{ dummy_vms_ids }}"
      register: res
      loop_control:
        pause: 2
 
    - include_tasks: includes/svt_wait_for_tasks.yml
      vars:
        tasks: "{{ res.results }}" 

    #
    # Fail if we could not find all the Dummy VM
    # 
    - fail:
        msg: "Dummy VMs are missing {{ dummy_vms_ids | count }} of {{ dummy_vms | count }} found"
      when: dummy_vms_ids | count != dummy_vms | count      
